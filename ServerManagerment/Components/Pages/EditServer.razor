@page "/servers/{id:int}"

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IServersEFCoreRepository ServersEFCoreRepository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalnavigation"
    ConfirmExternalNavigation="true"></NavigationLock>

<h3>Edit Server</h3>
<br />
<br />
@if (server != null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit" Enhance>
     <DataAnnotationsValidator />

     <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

     <FieldComponent Label="Name">
         <Control>
             <InputText @bind-Value="server.Name" class="form-control" @bind-Value:after="SetUnsavedChangeFlag"></InputText>
         </Control>
         <ValidationControl>
             <ValidationMessage For="() => server.Name" />
         </ValidationControl>
     </FieldComponent>

     <FieldComponent Label="City">
         <Control>
             <InputText @bind-Value="server.City" class="form-control"></InputText>
         </Control>
         <ValidationControl>
             <ValidationMessage For="() => server.City" />
         </ValidationControl>
     </FieldComponent>

     <FieldComponent Label="Online">
         <Control>
             <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
         </Control>
     </FieldComponent>
     <br />
     <button class="btn btn-primary" type="submit">Update</button>
     &nbsp;
     <a href="/servers" class="btn btn-primary">Close</a>
 </EditForm>
}
@code {
    [Parameter]
    public int id { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    [SupplyParameterFromForm]
    private Server? server { get; set; }


    public bool unsavedEdits = false;

    private void SetUnsavedChangeFlag()
    {
        unsavedEdits = true;
    }

    protected override void OnParametersSet()
    {
        server ??= ServersEFCoreRepository.GetServerById(id);        
    }

    private void Submit()
    {
        if (server != null)
        {
            ServersEFCoreRepository.UpdateServer(server.ServerId, server);
            unsavedEdits = false;
        }

        NavigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");
    }

    private async Task OnBeforeInternalnavigation(LocationChangingContext context)
    {
        if (unsavedEdits)
        {
            var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "There are unsaved changes.\nAre you sure you want to leave this page?");
            if (!isConfirmed)
            {
                context.PreventNavigation();
            }
        }
       
    }

}
