@page "/quickgrid"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager NavigationManager
@inject IServersEFCoreRepository ServersEFCoreRepository
@rendermode InteractiveServer

<h3>QuickGrideDemo</h3>
@if (servers != null)
{
    <QuickGrid Items="servers.AsQueryable()" Pagination="paginationState">
        <PropertyColumn Property="s => s.Name"></PropertyColumn>
        <PropertyColumn Property="s => s.City" Sortable="true"></PropertyColumn>
        <TemplateColumn Title="Status" Sortable="true" SortBy="GridSort<Server>.ByAscending(s => s.IsOnline)">
            @if (context.IsOnline)
            {
                <div style="color:green">Online</div>
            }
            else
            {
                <div style="color:red">Offline</div>
            }
        </TemplateColumn>
        <TemplateColumn Title="People Online">
            @if (context.IsOnline)
            {
                Random rnd = new Random();
                <div>@rnd.Next(100)</div>
            }
        </TemplateColumn>
        <TemplateColumn>
            @if (context.IsOnline)
            {
                <button type="button" class="btn btn-outline-danger" @onclick="@(()=>context.IsOnline = false)">Turn Off</button>
            }
            else
            {
                <button type="button" class="btn btn-outline-success" @onclick="@(()=>context.IsOnline = true)">Turn On</button>
            }

        </TemplateColumn>
        <TemplateColumn>
            <a href="/servers/@context.ServerId" class="btn btn-link">Edit</a>
        </TemplateColumn>
        <TemplateColumn>
            <ChildContent Context="server">
                <EditForm Model="server"
                          FormName="@($"form-server-{server.ServerId}")"
                          OnValidSubmit="@(() => {DeleteServer(server.ServerId);})">
                    <button type="submit" class="btn btn-primary">Delete</button>
                </EditForm>
            </ChildContent>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="paginationState"></Paginator>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<Server>? servers;
    public EventCallback<int> DeleteServerCallback { get; set; }
    private PaginationState paginationState = new PaginationState { ItemsPerPage = 5 };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            servers = ServersEFCoreRepository.GetServers();
        }
    }

    private void DeleteServer(int serverId)
    {
        ServersEFCoreRepository.DeleteServer(serverId);
        NavigationManager.NavigateTo("/quickgrid", true);
        // DeleteServerCallback.InvokeAsync(serverId);
    }
}
